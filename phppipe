pipeline {
    agent {
        node {
            label 'ana_sunucu'
        }
    }
    triggers {
        pollSCM '* * * * *'
    }
    stages {
            stage('sonar sacnner') {
                def scannerHome = tool "SonarScanner"
                steps {
                    sh "/opt/sonarqube/bin/linuxx86-64/sonar-scanner"
                }
            }
              stage('CodeSniffer') {
                  steps {
                      sh '''
                        cd myapphp
                        composer config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
                        composer require --dev phpcsstandards/phpcsdevtools:^1.0
                        composer require --dev phpstan/phpstan
                        composer require "squizlabs/php_codesniffer=*"
                        ls -ltr vendor/bin
                        vendor/bin/phpcs --standard=phpcs.xml src/ --report=checkstyle --report-file=../build/logs/phpcs.checkstyle.xml
                        '''
                  }
              }
              stage('PHP Compatibility Checks') {
                  steps {
                      sh '''
                        cd myapphp
                        vendor/bin/phpcs --standard=PSR12 src/
                        '''
                  }
              }
              stage('PHPStan') {
                  steps {
                      sh '''
                        cd myapphp
                        vendor/bin/phpcs --report=checkstyle src/> build/logs/phpcs.checkstyle.xml
                        '''
                  }
              }
    }
    post {
            always {
                echo "Başarılı"
            }
            failure {
                echo "I failed"
            }
        }
}
